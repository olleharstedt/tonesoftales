-- MySQL dump 10.13  Distrib 5.5.34, for debian-linux-gnu (x86_64)
--
-- Host: localhost    Database: d37433
-- ------------------------------------------------------
-- Server version	5.5.34-0ubuntu0.12.10.1

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `ds_api`
--

DROP TABLE IF EXISTS `ds_api`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `ds_api` (
  `name` varchar(100) NOT NULL DEFAULT '',
  `script` text NOT NULL,
  `active` tinyint(1) DEFAULT '1',
  `version` int(11) DEFAULT '1',
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `desc` varchar(500) NOT NULL,
  `signature` varchar(100) NOT NULL,
  `internal` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=43 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `ds_api`
--

LOCK TABLES `ds_api` WRITE;
/*!40000 ALTER TABLE `ds_api` DISABLE KEYS */;
INSERT INTO `ds_api` VALUES ('get_deck','function get_deck(deck_nr)\n\n      for k, deck in pairs(decks) do\n            if deck.deck_nr == deck_nr then\n                  return deck\n            end\n      end\n\n      return nil\nend\n',1,1,1,'Return deck with <span class=param>deck_id</span>','get_deck(deck_id)',0),('pick_card','function __pick_card(player_nr, deck_nr, nr)\n      local player = players[player_nr]\n      if (player == nil) then\n            chat(\"Error: pick_card: Found no player with nr \" .. player_nr)\n            return false\n      end\n\n      local deck = get_deck(deck_nr)\n      if (deck == nil) then\n            chat(\"Error: pick_card: Found no deck with nr \" .. deck_nr)\n            return false\n      end\n\n      if (table.getn(deck.cards) < nr) then\n            chat(\"Error: pick_card: Not enough cards in deck\")\n            return false\n      end\n\n     local card = deck.cards[#deck.cards]\n\n      onpickup_all(player, deck, 1)\n      card.onpickup(player, deck, 1)\n\n      -- TODO: Should be own function \n      --local card = table.remove(deck.cards, 1)\n      --table.insert(player.hand, card)\n\n      return true\nend\n',1,1,2,'Pick <span class=param>nr</span> of cards from <span class=param>deck_id</span> and put it in <span class=param>player_nr</span>`s hand.<br />This function calls card.onpickup().','__pick_card(player_nr, deck_id, nr)',1),('shuffle','function shuffle(deck)\n      \n      if deck == nil then\n            chat(\"shuffle: No deck\")\n            return false\n      end\n\n      t = deck.cards\n      local n = #t\n\n      while n >= 2 do\n            -- n is now the last pertinent index\n            local k = math.random(n) -- 1 <= k <= n\n            -- Quick swap\n            t[n], t[k] = t[k], t[n]\n            n = n - 1\n      end\n\n      deck.cards = t\n\n      return deck\nend\n',1,1,3,'Shuffle <span class=param>deck.','shuffle(deck)',0),('place_deck','',1,1,4,'Place deck with <span class=param>deck_nr</span> onto <span class=param>table_slot</span>, cards down.','place_deck(deck_nr, table_slot)',0),('add_action','',1,1,5,'Add <span class=param>action</span> to the game (see datastructures above for information about the action type). If the action id already exists an exception will be thrown that halts the program (ActionExists).','add_action(action)',0),('dump','function table.show(t, name, indent)\n   local cart     -- a container\n   local autoref  -- for self references\n\n   --[[ counts the number of elements in a table\n   local function tablecount(t)\n      local n = 0\n      for _, _ in pairs(t) do n = n+1 end\n      return n\n   end\n   ]]\n   -- (RiciLake) returns true if the table is empty\n   local function isemptytable(t) return next(t) == nil end\n\n   local function basicSerialize (o)\n      local so = tostring(o)\n      if type(o) == \"function\" then\n         local info = debug.getinfo(o, \"S\")\n         -- info.name is nil because o is not a calling level\n         if info.what == \"C\" then\n            return string.format(\"%q\", so .. \", C function\")\n         else \n            -- the information is defined through lines\n            return string.format(\"%q\", so .. \", defined in (\" ..\n                info.linedefined .. \"-\" .. info.lastlinedefined ..\n                \")\" .. info.source)\n         end\n      elseif type(o) == \"number\" or type(o) == \"boolean\" then\n         return so\n      else\n         return string.format(\"%q\", so)\n      end\n   end\n\n   local function addtocart (value, name, indent, saved, field)\n      indent = indent or \"\"\n      saved = saved or {}\n      field = field or name\n\n      cart = cart .. indent .. field\n\n      if type(value) ~= \"table\" then\n         cart = cart .. \" = \" .. basicSerialize(value) .. \";\\n\"\n      else\n         if saved[value] then\n            cart = cart .. \" = {}; -- \" .. saved[value] \n                        .. \" (self reference)\\n\"\n            autoref = autoref ..  name .. \" = \" .. saved[value] .. \";\\n\"\n         else\n            saved[value] = name\n            --if tablecount(value) == 0 then\n            if isemptytable(value) then\n               cart = cart .. \" = {};\\n\"\n            else\n               cart = cart .. \" = {\\n\"\n               for k, v in pairs(value) do\n                  k = basicSerialize(k)\n                  local fname = string.format(\"%s[%s]\", name, k)\n                  field = string.format(\"[%s]\", k)\n                  -- three spaces between levels\n                  addtocart(v, fname, indent .. \"   \", saved, field)\n               end\n               cart = cart .. indent .. \"};\\n\"\n            end\n         end\n      end\n   end\n\n   name = name or \"__unnamed__\"\n   if type(t) ~= \"table\" then\n      return name .. \" = \" .. basicSerialize(t)\n   end\n   cart, autoref = \"\", \"\"\n   addtocart(t, name, indent)\n   return cart .. autoref\nend dump = table.show;',1,1,6,'Return string representation of <span class=param>table</span>','dump(table)',0),('game_over','',1,1,7,'Ends the game. No game actions are possible after this. Chat is still active.','game_over()',0),('getn','',1,1,8,'Same as table.getn, return length of <span class=param>table</span>.','getn(table)',0),('get_card','function get_card(card_nr)\n\n      for _, card in pairs(cards) do      -- ALL cards should be stored in cards at init\n            if card.card_nr == card_nr then\n                  return card\n            end\n      end\n\n      chat(\"Error: get_card: No card with nr \" .. card_nr)\n      return nil\nend\n',1,1,9,'Get card with <span class=\'param\'>card_nr</span> from anywhere (deck, players hand, ...).','get_card(card_nr)',0),('place_card_on_table','',1,1,10,'Place <span class=param>card</span> on <span class=param>table_slot</span> with <span class=param>facing</span>.','place_card_on_table(card, table_slot, facing)',0),('play_card','function __play_card(player_nr, card_nr)\n      local player = players[player_nr]\n      if (player == nil) then\n            chat(\"Error: pick_card: Found no player with nr \" .. player_nr)\n            return false\n      end \n\n      card = get_card(card_nr)\n      if card == nil then\n            chat(\"Error: pick_card: Found no card with nr \" .. card_nr)\n            return false\n      end \n\n      -- check so player really have card in hand\n      -- done in ocaml\n\n      -- move card is done in user specific function (can be moved to trash or table or anywhere).\n    \n      -- Run onplay for all cards\n      onplay_all(player, card)\n\n      -- TODO: Run onplay for card from this deck\n\n      -- Run onplay for this card\n      card.onplay(player, card)\n\n      return true\nend\n',1,1,11,'Play card with <span class=param>card_nr</span> for player with <span class=param>player_nr</span>.<br /><br />This function is run automatically when a player plays a card, so there is no need to ever call it. It will in turn call onplay_all for all cards and, after, onplay for this specific card.','__play_card(player_nr, card_nr)',1),('remove_card_from_hand','function __remove_card_from_hand(player, card)\n      local hand = player.hand\n      local card_nr = card.card_nr\n      for k, card in ipairs(hand) do\n            if card.card_nr == card_nr then\n                  table.remove(hand, k)\n                  return true\n            end \n      end \n\n      chat(\"Error: remove_card_from_hand: No such card nr in hand: \" .. card_nr)\n      return false\nend\n',1,1,12,'Removes the <span class=param>card</span> from <span class=param>player</span>\'s hand. Use this before placing a card on table.','remove_card_from_hand(player, card)',0),('get_free_table_slot','--- Used with place_card_on_table()\nfunction get_free_table_slot()\n      local j = 1\n      for i, slot in ipairs(table_slots) do\n            if (slot == nil) then\n                  return i\n            end\n            j = j + 1\n      end\n\n      return j\nend\n',1,1,13,'Get the next free table slot, If slot 1 and 3 is occupied with cards, this function will return 2.','get_free_table_slot()',0),('update_hand','',1,1,14,'Update hand for <span class=param>player</span>, and show changes for others players (number of cards on hand).','update_hand(player)',0),('remove_card_from_table','function __remove_card_from_table(card)\n      for k, table_card in ipairs(table_slots) do\n            if table_card.__type == \"card\" then\n                  if table_card.card_nr == card.card_nr then\n                        table.remove(table_slots, k)\n                        return true\n                  end \n            end \n      end \n\n      chat(\"Error: remove_card_from_table: No such card nr in table: \" .. card.card_nr)\n      return false\nend\n',1,1,15,'Remove <span class=\'param\'>card</span> from table slot. Sends error message of no such card was found.','remove_card_from_table(card)',0),('end_turn','',1,1,16,'Ends the turn for active player.','end_turn()',0),('get_free_player_slot','function get_free_player_slot(player)\n      local j = 1\n      for i, slot in ipairs(player.slots) do\n            if (slot == nil) then\n                  return i\n            end\n            j = j + 1\n      end\n\n      return {player.slots, j}\nend\n',1,1,17,'Get next free player slot for <span class=param>player</span>.','get_free_player_slot(player)',0),('update_player_slots','',1,1,18,'Updates slots for <span class=param>player</span>, and show the changes for other players.','update_player_slots(player)',0),('remove_action','',1,1,19,'Removes <span class=param>action</span> from the game. Be sure to run <code>update_hand</code> (or table, slots, etc) to make the removal visual.','remove_action(action)',0),('update_table','',1,1,20,'Updates the table to visualize changes in the table_slots object.','update_table()',0),('new_overlay','function new_overlay()\n      return {__type = \"overlay\"}\nend\n',1,1,21,'Returns a new overlay object (see description above).','new_overlay()',0),('new_stack','function new_stack()\n      return {__type = \"stack\"}\nend\n',1,1,22,'Returns a new stack object (see description above).','new_stack()',0),('remove_card_from_slot','function remove_card_from_slot(player, card)\n      local card_nr = card.card_nr\n\n      for i, slot in ipairs(player.slots) do\n            for k, card in ipairs(slot) do\n                  if card.card_nr == card_nr then\n                        table.remove(slot, k)\n                        return true\n                  end\n            end\n      end\n\n      chat(\"Error: remove_card_from_slot: No such card nr in slot.cards: \" .. card_nr)\n      return false\n\nend   \n',1,1,23,'Removes a <span class=param>card</span> from a <span class=param>player</span>s slot. To remove a card from a table slot, access <code>table_slots</code> directly.','remove_card_from_slot(player, card)',0),('set_values','function set_values(deck)\n    for _, card in pairs(deck.cards) do\n        local title = card.title\n        -- Set values\n        if string.find(title, \"Ace\") ~= nil then\n            card.value = 1 \n        elseif string.find(title, \'King\') ~= nil then\n            card.value = 13\n        elseif string.find(title, \'Queen\') ~= nil then\n            card.value = 12\n        elseif string.find(title, \'Jack\') ~= nil then\n            card.value = 11\n        elseif string.find(title, \"Ten\") ~= nil then\n            card.value = 10\n        elseif string.find(title, \"Nine\") ~= nil then\n            card.value = 9 \n        elseif string.find(title, \"Eight\") ~= nil then\n            card.value = 8 \n        elseif string.find(title, \"Seven\") ~= nil then\n            card.value = 7 \n        elseif string.find(title, \"Six\") ~= nil then\n            card.value = 6 \n        elseif string.find(title, \"Five\") ~= nil then\n            card.value = 5 \n        elseif string.find(title, \"Four\") ~= nil then\n            card.value = 4 \n        elseif string.find(title, \"Three\") ~= nil then\n            card.value = 3 \n        elseif string.find(title, \"Two\") ~= nil then\n            card.value = 2 \n        end \n\n        -- Set suits\n        if string.find(title, \"spades\") ~= nil then\n            card.suit = \"spades\"\n        elseif string.find(title, \"diamonds\") ~= nil then\n            card.suit = \"diamonds\"\n        elseif string.find(title, \"clubs\") ~= nil then\n            card.suit = \"clubs\"\n        elseif string.find(title, \"hearts\") ~= nil then\n            card.suit = \"hearts\"\n        end \n    end \nend',1,1,24,'Set values and suits for the standard deck. <span class=param>deck</span> MUST be the standard deck. Please observe that aces will be set to value = 1.','set_values(deck)',0),('action_exists','',1,1,25,'Returns true if <span class=param>action</span> exists in state (is added with add_action).','action_exists(action)',0),('set_turn','',1,1,26,'Sets turn to the player with <span class=param>player_nr</span> (1 for player1, etc). Will NOT trigger <code>onendturn</code> or <code>onbeginturn</code>.','set_turn(player_nr)',0),('oo','Action = {}\n__actions = {}    -- Global list of actions, to track id etc\n\nfunction Action:add()\n      add_action(self)\nend\n\nfunction Action:remove()\n      remove_action(self)\nend\n\nfunction Action:exists()\n      return action_exists(self)\nend\n\nfunction Action:new(a)\n      a.action_id = #__actions + 1 \n\n      -- Validation\n      if a.action_name ~= \"play_card\" and\n         a.action_name ~= \"pick_card\" then\n            error(\"Action:new: action_name not supported: \" .. a.action_name)\n      end \n\n      if a.menu_text == nil then\n            error(\"Action:new: no menu_text\")\n      end \n\n      if #a.players == 0 then\n            error(\"Action:new: no players\")\n      end \n\n      if a.target ~= \"hand\" and\n         a.target ~= \"deck\" and\n         a.target ~= \"player_slot\" then\n            error(\"Action:new: illegal target: \" .. a.target)\n      end \n\n      if #a.target_ids == 0 then\n            error(\"Action:new: no target ids\")\n      end \n\n      setmetatable(a, self)\n      self.__index = self\n      table.insert(__actions, a)\n      return a\nend\n',1,1,27,'Object-oriented API layer.','OO',0),('enable_marking','',1,1,28,'Enables marking of slots and cards. Marking can then be seen in the Lua state (e.g. <code>player1.slots[1].marked = true</code>), to apply certain actions to marked slots. <p>See <code>slot_list</code> description above and the tutorials for more information and usage example.</p>','enable_marking(slot_list)',0),('add_gadget','',1,1,29,'Add <span class=param>gadget</span> to player area.','add_gadget(gadget)',0),('remove_gadget','',1,1,30,'Remove <span class=param>gadget</span> from player area.','remove_gadget(gadget)',0),('locate_card','-- Locate slot location of @card\n-- Return slot table, like {slot_type = \"player_hand\", player = p, slot_nr = 2}\nfunction __locate_card(card)\n	local location = {}\n	local card_nr = card.card_nr\n	-- Check for all players\n	for k, p in ipairs(players) do\n\n		-- Check hand\n		for k2, c in ipairs(p.hand) do\n			if c.card_nr == card_nr then\n				return {\n					slot_type = \"player_hand\",\n					player = p,\n					slot_nr = k2\n				}\n			end\n		end\n\n		-- Check player slots\n		for k2, c in ipairs(p.slots) do\n			-- Slot is a card\n			if c.__type == \"card\" and c.card_nr == card_nr then\n				return {\n					slot_type = \"player_slot\",\n					player = p,\n					slot_nr = k2\n				}\n			-- Slot is a deck\n			elseif c.__type == \"deck\" then\n				for k3, c2 in ipairs(c.cards) do\n					if c2.card_nr == card_nr then\n						return {\n							slot_type = \"player_slot\",\n							player = p,\n							slot_nr = k3\n						}\n					end\n				end\n			-- Slot is an overlay/stack\n			else\n				for k3, c2 in ipairs(c) do\n					if c2.card_nr == card_nr then\n						return {\n							slot_type = \"player_slot\",\n							player = p,\n							slot_nr = k2,\n							index = k3\n						}\n					end\n				end\n			end\n		end\n	end\n	\n	-- If we\'re here, card does not belong to player, check table\n\n	for k, s in ipairs(table_slots) do\n		-- Slot is a card\n		if s.__type == \"card\" and s.card_nr == card_nr then\n			return {\n				slot_type = \"table_slot\",\n				slot_nr = k\n			}\n		-- Slot is a deck\n		elseif s.__type == \"deck\" then\n			for k2, c in ipairs(s.cards) do\n				if c.card_nr == card_nr then\n					return {\n						slot_type = \"table_slot\",\n						slot_nr = k\n					}\n				end\n			end\n		-- Slot is an overlay/stack\n		else\n			for k2, c in ipairs(s) do\n				if c.card_nr == card_nr then\n					return {\n						slot_type = \"table_slot\",\n						slot_nr = k,\n						index = k2\n					}\n				end\n			end\n		end\n	end\n\n	-- Should never be here\n	error(\"locate_card: did not find a card with card_nr \" .. card_nr)\n\nend',1,1,31,'','__locate_card(card)',1),('roll_dice','function roll_dice(dice)\n  dice.value = math.random(6)\nend\n',1,1,32,'Set <span class=param>dice</span> value to a number between 1 and 6.','roll_dice(dice)',0),('update_points_table','',1,1,33,'Shows and updates the points table with <span class=param>points_table</span>.','update_points_table(points_table)',0),('show_hand_icon','',1,1,34,'Shows the hand icon for each player. Needed before moving cards to hand (not needed if hand is updated with cards before).','show_hand_icon()',0),('gadget_exists','',1,1,35,'Returns true if <span class=param>gadget</span> has been added to game with <code>add_gadget</code>.','gadget_exists(gadget)',0),('move_card','',1,1,36,'Animate a move of <span class=param>card</span> to slot <span class=param>dest</span>. The duration is 500 milliseconds. When done, <span class=param>callback</span> will be executed.','move_card(card, dest, callback)',0),('enable_draggable','',1,1,37,'Enable <span class=param>cards</span> to be draggable for <span class=param>players</span>. The cards can be dropped on <span class=param>droppables</span>, which will execute the <span class=param>callback</span> function.','enable_draggable(players, cards, droppables, callback)',0),('enable_onclick','',1,1,38,'Makes <span class=param>cards</span> clickable. When clicked, the <span class=param>callback</span> will be triggered.','enable_onclick(cards, callback)',0),('set_realtime','',1,1,39,'Sets a <span class=param>callback</span> function that will be executed 6 times each second. You can halt the function with <code>unset_realtime</code>.','set_realtime(callback)',0),('unset_realtime','',1,1,40,'Halts the callback function set with <code>set_realtime</code>.','unset_realtime()',0),('bind_key','',1,1,41,'Binds key with character code <span class=param>char_code</span> to <span class=param>callback</span>. The key can be unbound with <code>unbind_key</code>.','bind_key(char_code, callback)',0),('unbind_key','',1,1,42,'Unbinds the callback associated with key <span class=param>char_code</span>.','unbind_key(char_code)',0);
/*!40000 ALTER TABLE `ds_api` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `ds_api_param`
--

DROP TABLE IF EXISTS `ds_api_param`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `ds_api_param` (
  `api_id` int(10) NOT NULL DEFAULT '0',
  `name` varchar(100) NOT NULL,
  `type` varchar(100) NOT NULL,
  `desc` varchar(500) NOT NULL,
  UNIQUE KEY `index1` (`api_id`,`name`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `ds_api_param`
--

LOCK TABLES `ds_api_param` WRITE;
/*!40000 ALTER TABLE `ds_api_param` DISABLE KEYS */;
INSERT INTO `ds_api_param` VALUES (1,'deck_nr','int','number of deck'),(2,'deck_nr','int','number of deck'),(2,'nr','int','number of cards to pick.'),(2,'player_nr','int','nr of player to put card in.'),(3,'deck','deck','(use get_deck to get deck from a deck id)'),(4,'deck_nr','int','number of deck. Deck must have been added to game.'),(4,'table_slot','int','id of slot, ranging from 1 to number of total slots.'),(5,'action','action','action object.'),(6,'table','table','any table'),(8,'table','table','any array-like table (like {1, 2, 3} or {\"a\", \"b\", \"c\"})'),(9,'card','card object',''),(10,'card_nr','int','unique identifier for a card (get with \"card.card_nr\").'),(10,'facing','string','either \"up\" or \"down\"'),(10,'table_slot','int','number of table slot, > 0'),(14,'player','player','player object; like player1 for first player, player2 for second, etc.'),(17,'player','player','player object, like player1, player2, ...'),(18,'player','player','player object, like player1, player2, ...'),(19,'action','action','action object, created by the user (see description of datastructures above)'),(26,'nr','int','player number'),(28,'slot_list','slot list','list of specific slot objects. See description of <code>slot_list</code> in the data structure descriptions above.'),(29,'gadget','gadget','See description above.'),(30,'gadget','gadget','See description above.'),(32,'dice','dice','See description of data-structures above.'),(33,'points_table','table','A table of tables of strings, like <code>{{\"\", \"Olle\", \"Sherlock\"}, {\"Points\", \"10\", \"5\"}}</code>.'),(36,'callback','function','Function that will executes when the animation is done (takes 500 milliseconds).'),(36,'card','card','A card, like <code>table_slots[1]</code> or <code>player1.hand[1]</code> or <code>deck1.cards[1]</code>.'),(36,'dest','unique_slot','A table defining the unique position of a slot. See description above.'),(37,'callback','function','Function like <code>function(player, src, dest) ... end</code> where <code>src</code> and <code>dest</code> are unique slots. e.g. <code>{slot_type = \"table_slot\", slot_nr = 1}</code> or <code>{slot_type = \"player_slot\", player = player1, slot_nr = 1}</code>.'),(37,'cards','card list','List of cards, like <code>{card1, card2, ...}</code>.'),(37,'droppables','slot_list','List of slots where the cards can be dropped. See description above of <code>slot_list</code> data structure.'),(37,'players','player list','List of players, like <code>{player1, player2}</code> or <code>{player1}</code>. Remember that <code>players</code> is a global variable containing all players.'),(38,'callback','function','Callback function like <code>function(player, card) ... end</code>.'),(38,'cards','card list','List of cards, like <code>{card1, card2, ...}</code>.'),(39,'callback','function','Callback function to run.'),(41,'callback','function','Callback function called when user presses the key, as <code>function(player) ... end</code>. If the user holds down the key, multiple callbacks will be executed.'),(41,'char_code','int','The keys character code, as used in Javascript; a value between 8 and 222, inclusive.'),(42,'char_code','int','The keys character code, as used in Javascript; a value between 8 and 222, inclusive.');
/*!40000 ALTER TABLE `ds_api_param` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `ds_api_datastructure`
--

DROP TABLE IF EXISTS `ds_api_datastructure`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `ds_api_datastructure` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(100) NOT NULL,
  `desc` varchar(5000) DEFAULT '',
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`)
) ENGINE=InnoDB AUTO_INCREMENT=12 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `ds_api_datastructure`
--

LOCK TABLES `ds_api_datastructure` WRITE;
/*!40000 ALTER TABLE `ds_api_datastructure` DISABLE KEYS */;
INSERT INTO `ds_api_datastructure` VALUES (1,'card','Card object. Each card for each deck in game becomes at least one card object, named as card1, card2, ...'),(2,'deck','Deck object. Each deck belonging to a game becomes at least one deck object at initialization, named deck1, deck2, ...'),(3,'decks','Array-like table of decks, like decks = {deck1, deck2, ...}'),(4,'player','Player object. There will be one player object for each player, named as player1, player2, ...'),(5,'stack','Like a deck, a collection of cards. Cards can be both turned up or down. The top card covers completely the other cards, unless rotated.'),(6,'overlay','Like a stack, a collection of cards where cards can be both turned up or down. The top card covers part of card below, which in turn covers a part of the card below it, etc.'),(7,'action','Action object that can be added or removed from the game, depending on game phase etc. Use functions add_action and remove_action to do this. Actions can only be run by a player under hers/his turn.'),(8,'slot_list','<p>List of specific slot objects, used as argument to <code>enable_marking</code>. There are three kind of slot objects:<p>\n<ul><li>player_hand</li><li>player_slot</li><li>table_slot</li></ul>\n\n<p>Not all slot objects have all three fields described below. See this example:</p> \n\n<pre>local slot_list = {}\n\ntable.insert(slot_list, { \n  slot_type = \"player_hand\",\n  players = players\n})\n\ntable.insert(slot_list, { \n  slot_type = \"player_slot\",\n  players = {player1},\n  slot_nrs = {1, 2, 3, 4, 5, 6}\n})\n\ntable.insert(slot_list, { \n  slot_type = \"table_slot\",\n  slot_nrs = {1, 2, 4, 6}\n})\n\nenable_marking(slot_list)</pre>\n<p>After this command is executed, the player whos turn it is will be able to mark all cards in his hand and all opponents hands; slot 1-6 of player1\'s slots; and slots 1, 2, 4 and 6 of the table slots.</p><p>Also note that each player should have his/hers <i>own</i> slot list. For example, you probably don\'t want all players to be able to mark each others slots all the time (or maybe you do).</p>'),(9,'gadget','<p>A gadget is a GUI element that is added below the cards of the player. The user can only se his/hers own gadgets. Gadgets are used with a callback function to execute code.</p>\n<p>The following gadgets are supported:</p>\n<ul>\n	<li>Button</li>\n	<li>Input field</li>\n	<li>Select list</li>\n	<li>Slider</li>\n	<li>Confirm dialog</li>\n</ul>\n<p>All gadgets run a callback function when activated.</p>\n<p>Examples:</p>\n<pre>-- A simple button with text \"Push\".\ngadget = {\n	gadget_id = 1,\n	type = \"button\",\n	text = \"Push\",\n	players = {player1}\n	callback = function(player) \n		chat(player.name .. \" pressed a button\")\n	end\n}\n\n-- A select list with three options. Value will change to 1 for \"One\", 2 for \"Two\" etc.\ngadget = {\n	gadget_id = 1,\n	type = \"select\",\n	players = {player1},\n	options = {\"One\", \"Two\", \"Three\"},\n	callback = function (player, value)\n		chat(\"You changed list to \" .. value)\n	end\n}\n\n-- Input gadget with button next to it. \"data\" in the callback function is a string.\ngadget = {\n	gadget_id = 2,\n	type = \"input\",\n	player = players,\n	text = \"Bet\",\n	callback = function (player, data)\n		chat(player.name .. \" wrote \" .. data)\n	end\n}\n\n-- A slider element from range 0 to 100 with step 5.\ngadget = {\n	gadget_id = 3,\n	type = \"slider\",\n	player = players,\n	range = {0, 100},\n	step = 5,		-- Optional field; defaults to 1\n	callback = function	(player, value)\n		chat(\"slider changed to \" .. value)\n	end\n}\n\n-- A confirm dialog pop-up that blocks user input until \"OK\" or \"Cancel\" is pressed.\n-- \"answer\" in callback function is a boolean value.\ngadget = {\n	gadget_id = 4,\n	type = \"confirm\",\n	player = players,\n	text = \"Really do this?\",\n	title = \"A title\",	-- Optional field; defaults to \"Confirm\"\n	callback = function(player, answer)\n		chat(player.name .. \" answered \" .. tostring(answer))\n	end\n}</pre>\n<p>Use functions <code>add_gadget</code> and <code>remove_gadget</code> to add and remove gadgets from the player area.</p>'),(10,'dice','A six sided dice.'),(11,'unique_slot','<p>A table defining the unique position of a slot. As with the <code>slot_list</code>, there are three kind of slots: player slot, table slot, and player hand.</p><p>This data structure is used by <code>enable_draggable</code> and <code>move_card</code>.</p><p>Examples:</p><pre>{\n	slot_type = \"player_slot\",\n	player = player1,\n	slot_nr = 1\n}\n\n{\n	slot_type = \"player_hand\",\n	player = player2\n}\n\n{\n	slot_type = \"table_slot\",\n	slot_nr = 1\n}</pre>\n');
/*!40000 ALTER TABLE `ds_api_datastructure` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `ds_api_datastructure_elem`
--

DROP TABLE IF EXISTS `ds_api_datastructure_elem`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `ds_api_datastructure_elem` (
  `api_datastructure_id` int(10) unsigned NOT NULL DEFAULT '0',
  `name` varchar(100) NOT NULL,
  `type` varchar(100) NOT NULL,
  `desc` varchar(500) NOT NULL,
  PRIMARY KEY (`api_datastructure_id`,`name`),
  CONSTRAINT `ds_api_datastructure_elem_ibfk_1` FOREIGN KEY (`api_datastructure_id`) REFERENCES `ds_api_datastructure` (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `ds_api_datastructure_elem`
--

LOCK TABLES `ds_api_datastructure_elem` WRITE;
/*!40000 ALTER TABLE `ds_api_datastructure_elem` DISABLE KEYS */;
INSERT INTO `ds_api_datastructure_elem` VALUES (1,'card_nr','int','card number. Unique for each card object.'),(1,'dir','string','upload directory (usually username of card owner).'),(1,'facing','string','\"up\" or \"down\"; default is \"down\", not showing suit/value.'),(1,'id','int','id for card, corresponding to that of the database. NOT unique for each card object.'),(1,'img','string','filename of picture.'),(1,'iscard','bool','true for card; useful to check what type an object is in a table slot.'),(1,'nr','int','how many copies of this card there is in this one deck.'),(1,'onpickup','function','this function will run when card is picked up from a deck.'),(1,'position','table','A table consisting of three fields: <code>top</code>, <code>left</code> and <code>rotate</code>. '),(1,'sound','string','filename of sound.'),(1,'title','string','title of card.'),(1,'__type','string','\"card\"'),(2,'cards','card list','This is the actual cards in the deck.'),(2,'deck_nr','int','deck number; unique.'),(2,'id','int','id for deck, corresponding for that in database. NOT unique for each deck object (can be multiple instances of one deck type in a game).'),(2,'isdeck','bool','true for deck'),(2,'name','string','name of deck'),(2,'__type','string','\"deck\"'),(4,'hand','card list','Array-like table with cards. This is the cards the player has picked up, or attained otherwise.'),(4,'name','string','Player username.'),(4,'player_nr','int','Number of player, unique; player1 will have player_nr = 1, etc.'),(4,'slots','list','This is a list of \"table types\", where a table type can be a card, deck, an overlay or a stack.'),(5,'__type','string','\"stack\"'),(6,'__type','string','\"overlay\"'),(7,'action_id','int','Unique id for this action.'),(7,'action_name','string','Either \"pick_card\" or \"play_card\" '),(7,'menu_text','string','Text that will be shown in the menu.'),(7,'players','player list','List of players, like {player1, player3, ...} or {player2}'),(7,'target','string','Either \"deck\", \"hand\" or \"player_slot\"'),(7,'target_ids','int list','List of ids of target (deck_nr, hand_nr, slot nr etc), like {1, 2, 4} or {1}'),(8,'players','player list','A list of players for which this specific slot type is applicative. Example: <code>{player1, player3}</code>. Not used for <code>\"table_slot\"</code> type.'),(8,'slot_nrs','int list','List of slot numbers which will be markable. Example: <code>{2, 3, 5}</code>. Not used for <code>\"player_hand\"</code> type.'),(8,'slot_type','string','One of these three values: <code>\"player_hand\", \"player_slot\" </code>or <code>\"table_slot\"</code>. \"player_hand\" is for marking cards in your hand, or the hand of your opponent (a player cannot mark separate cards in an opponents hand). \"player_slot\" is for marking cards in each players separate table area. \"table_slot\" is for marking cards on the main table.'),(9,'callback','function','Callback function that will be executed when the gadget is activated. The arguments of the function varies between gadget types; see the examples for more information about this.'),(9,'gadget_id','int','Unique id of gadget.'),(9,'players','player list','List of players for whom this gadget will be available.'),(9,'text','string','Text that will be shown on/in gadget.'),(9,'type','string','Type of gadget. <code>\"button\"</code> is supported right now.'),(10,'value','int','A value between 1 and 6.'),(10,'__type','string','\"dice\"'),(11,'player','player','Owner of the slot, if any.'),(11,'slot_nr','int','Number of slot (not used by <code>\"player_hand\"</code>.'),(11,'slot_type','string','Either <code>\"player_slot\"</code>, <code>\"table_slot\"</code> or <code>\"player_hand\"</code>.');
/*!40000 ALTER TABLE `ds_api_datastructure_elem` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2013-11-29  0:49:45
