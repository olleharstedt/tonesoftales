-- MySQL dump 10.13  Distrib 5.5.34, for debian-linux-gnu (x86_64)
--
-- Host: localhost    Database: d37433
-- ------------------------------------------------------
-- Server version	5.5.34-0ubuntu0.12.10.1

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Dumping data for table `ds_game`
--
-- WHERE:  id=34

LOCK TABLES `ds_game` WRITE;
/*!40000 ALTER TABLE `ds_game` DISABLE KEYS */;
INSERT INTO `ds_game` VALUES (34,'Yatzy','The traditional Yatzy game (similiar to Yahtzee).','-- The five dice\ndice = {}\n\npoints_table = {}\n\n-- Options for the <selec>\noptions = {\n  \"Ones\",\n  \"Twos\",\n  \"Threes\",\n  \"Fours\",\n  \"Fives\",\n  \"Sixes\",\n  \"One pair\",	-- 7\n  \"Two pairs\",	-- 8\n  \"Three of a kind\", -- 9\n  \"Four of a kind\",	 -- 10\n  \"Small straight\",	 -- 11\n  \"Large straight\",	 -- 12\n  \"House\",	-- 13\n  \"Yatzy\",	-- 14\n  \"Chance\",	-- 15\n}\n\n-- Helper function to sum ones, twos, threes...\nfunction sum_all(player, value)\n  local points = 0\n  for i = 1, 5 do\n    points = points + (table_slots[i].value == value and value or 0)\n  end\n\n  update_points(player, value, points)\n  \n  -- Check for bonus\n  local done = true\n  points = 0\n  for i = 2, 7 do  -- First row is player name\n    if points_table[i][player.player_nr + 1] == \"\" then\n      done = false\n    end\n    points = points + (tonumber(points_table[i][player.player_nr + 1]) or 0)\n  end\n  \n  -- Add bonus if points > 62 (and not added already)\n  if done and points > 62 and points_table[16][player.player_nr + 1] == \"\" then\n    update_points(player, 16, 50)\n  elseif done and points < 63 and points_table[16][player.player_nr + 1] == \"\" then\n    update_points(player, 16, 0)\n  end\n  \n \nend\n\nfunction update_points(player, value, points)\n  points_table[value + 1][player.player_nr + 1] = tostring(points)\n  player.select_gadget.options[value] = \"\"\n  update_select(player)\nend\n\n-- Updates the <select> of points options\nfunction update_select(p)\n  remove_gadget(p.select_gadget)\n  remove_gadget(set_points_button)\n  add_gadget(p.select_gadget)\n  add_gadget(set_points_button)\n  -- Set select to top option (option which is not empty string)\n  for i = 1, 15  do\n    if p.select_gadget.options[i] ~= \"\" then\n      p.select = i\n      break\n    end\n  end\nend\n\n-- Button to set points to chosen select\nset_points_button = {\n  gadget_id = 3,\n  type = \"button\",\n  text = \"Set points\",\n  players = players,\n  callback = function (player)\n    \n    -- Only during your turn\n    if players_turn.player_nr == player.player_nr and player.select > 0 and player.select < 16 then\n      \n      -- Abort if already set\n      if player.select_gadget.options[player.select] == \"\" then return end\n      \n      local points = 0\n      \n      -- Switch on selected point\n      if player.select == 1 then\n        -- Sum all ones\n		sum_all(player, 1)\n      elseif player.select == 2 then\n        -- Sum all twos\n		sum_all(player, 2)\n	  elseif player.select == 3 then\n		sum_all(player, 3)\n	  elseif player.select == 4 then\n		sum_all(player, 4)\n	  elseif player.select == 5 then\n		sum_all(player, 5)\n	  elseif player.select == 6 then\n		sum_all(player, 6)\n      elseif player.select == 7 then -- pair\n		update_points(player, 7, get_pair(player))\n	  elseif player.select == 8 then -- two pairs\n        update_points(player, 8, get_twopair(player))\n      elseif player.select == 9 then -- three of a kind\n        update_points(player, 9, get_threekind(player))\n      elseif player.select == 10 then -- four of a kind\n        update_points(player, 10, get_fourkind(player))\n	  elseif player.select == 11 then -- small straight\n        update_points(player, 11, get_small_straight(player))\n	  elseif player.select == 12 then -- large straight\n        update_points(player, 12, get_large_straight(player))\n	  elseif player.select == 13 then -- house\n        update_points(player, 13, get_house(player))\n	  elseif player.select == 14 then -- yatzy\n        update_points(player, 14, get_yatzy(player))\n	  elseif player.select == 15 then -- chance\n        update_points(player, 15, get_chance(player))\n      end\n      \n      update_points_table(points_table)\n      \n      if check_game_over() then\n        game_over()\n      else\n        end_turn()\n      end\n      \n    end\n    \n  end\n}\n\n-- Initialize game\nfunction init()\n  for i = 1, 5 do\n    dice[i] = {\n      __type = \"dice\",\n      value = 3\n    }\n    table_slots[i] = dice[i]\n  end\n  \n  update_table()\n  \n  add_gadget {\n    gadget_id = 1,\n    type = \"button\",\n    text = \"Roll marked\",\n    players = players,\n    callback = function (player)\n      -- Only roll if it\'s your turn\n      if players_turn.player_nr == player.player_nr and player.rolls < 3 then\n        \n        -- Abort if no dice is marked\n        local dice_marked = false\n        for i = 1, 5 do\n          if table_slots[i].marked then dice_marked = true end\n        end\n        if not dice_marked then return end\n        \n        for i = 1, 5 do\n          if table_slots[i].marked then\n            roll_dice(table_slots[i])\n          end\n        end\n        player.rolls = player.rolls + 1\n        update_table()\n        if player.rolls == 3 then\n          chat(\"Three rolls done, choose points\")\n        end\n      end\n    end\n  }\n  \n  -- Choose points with a select\n  for _, p in ipairs(players) do\n    p.select_gadget = {\n      gadget_id = p.player_nr + 10,\n      type = \"select\",\n      players = {p},\n      options = shallowcopy(options),\n      callback = function(player, value)\n        player.select = value\n      end\n    }\n    add_gadget(p.select_gadget)\n  end\n  --[[\n  add_gadget {\n    gadget_id = 2,\n    type = \"select\",\n    players = players,\n    options = options,\n    callback = function (player, value)\n      player.select = value\n    end\n  }--]]\n  \n  add_gadget(set_points_button)\n  \n  -- Default select choice to 1\n  for _, p in ipairs(players) do\n    p.select = 1\n  end\n\n  -- Init points\n  local ps = {}\n  table.insert(ps, \"\")\n  for _, p in ipairs(players) do\n    table.insert(ps, p.name)\n  end\n  points_table[1] = ps\n  \n  for k, v in ipairs(options) do\n    points_table[k + 1] = {v}\n    -- Must init empty rows of table if Lua is to find (will skip holes like {[1] = \"Foo\", [3] = \"Bar\"})\n    for _, p in ipairs(players) do\n      table.insert(points_table[k + 1], \"\")\n    end\n  end\n\n  table.insert(points_table, {\"BONUS\"})\n  for _, p in ipairs(players) do\n    table.insert(points_table[17], \"\")\n  end\n  table.insert(points_table, {\"TOTAL\"})\n  for _, p in ipairs(players) do\n    table.insert(points_table[18], \"\")\n  end\n  \n  \n  update_points_table(points_table)\n  \nend\n\n-- Get all matches, e.g. {[1] = 3, [2] = 2, [3] = 0, [4] = 0, [5] = 0, [6] = 0} when player rolled three ones and two twos.\nfunction get_matches(p)\n  local matches = {}\n  \n  for i=1,6 do matches[i] = 0 end\n  \n  for _, dice in ipairs(table_slots) do\n    matches[dice.value] = matches[dice.value] + 1\n  end\n  \n  return matches\nend\n\n-- Return points of a pair, or 0 if no pair is found\nfunction get_pair(p)\n  local matches = get_matches(p)\n  \n  for i=6, 1, -1 do  -- Count from six to choose highest pair\n    if matches[i] > 1 then\n      return 2 * i\n    end\n  end\n  \n  return 0\nend\n\n-- Return points for a two pair, or 0 if not found\nfunction get_twopair(player)\n\n  local matches = get_matches(player)\n  local pars = 0\n  local points = 0\n  \n  for i=1, 6 do\n    if matches[i] > 1 then\n      pars = pars + 1\n      points = points + (i * 2)\n    end\n  end\n  \n  if pars == 2 then \n    return points\n  else\n    return 0\n  end\n  \nend\n\nfunction get_threekind(p)\n  local matches = get_matches(p)\n  \n  for i=1, 6 do\n    if matches[i] > 2 then\n      return i * 3\n    end\n  end\n  \n  return 0\nend\n\nfunction get_fourkind(p)\n  local matches = get_matches(p)\n  \n  for i = 1, 6 do\n    if matches[i] > 3 then\n      return i * 4\n    end\n  end\n  \n  return 0\n  \nend\n\nfunction get_small_straight(p)\n  \n  table.sort(table_slots, function(x, y) return x.value > y.value end)\n  \n  if (table_slots[1].value == 5 and\n      table_slots[2].value == 4 and\n      table_slots[3].value == 3 and\n      table_slots[4].value == 2 and\n      table_slots[5].value == 1) then\n    return 15\n  end\n  \n  return 0\n \nend\n\nfunction get_large_straight(p)\n  \n  table.sort(table_slots, function(x, y) return x.value > y.value end)\n  \n  if (table_slots[1].value == 6 and\n      table_slots[2].value == 5 and\n      table_slots[3].value == 4 and\n      table_slots[4].value == 3 and\n      table_slots[5].value == 2) then\n    return 20\n  end\n  \n  return 0\n \nend\n\nfunction get_house(p)\n\n  local matches = get_matches(p)\n  local low, high = false, false\n  \n  for i = 1, 6 do\n  	if matches[i] == 3 then high = i end\n    if matches[i] == 2 then low = i end\n  end\n  \n  if high == false or low == false then\n    return 0\n  else\n    return low * 2 + high * 3\n  end\nend\n\nfunction get_yatzy(p)\n  \n  if table_slots[1].value == table_slots[2].value and\n     table_slots[2].value == table_slots[3].value and\n     table_slots[3].value == table_slots[4].value and\n     table_slots[4].value == table_slots[5].value then\n    return 50\n  end\n  \n  return 0\n  \nend\n\nfunction get_chance(p)\n  return table_slots[1].value + table_slots[2].value + table_slots[3].value + table_slots[4].value + table_slots[5].value\nend\n\nfunction check_game_over()\n  \n  local is_game_over = true\n  for _, p in ipairs(players) do\n  \n    p.total = 0\n    \n    for i = 2, 17 do\n      if points_table[i][p.player_nr + 1] == \"\" then is_game_over = false end\n      p.total = p.total + (tonumber(points_table[i][p.player_nr + 1]) or 0)\n    end\n    \n  end\n  \n  local highest = {total = 0}\n  if is_game_over then\n    for _, p in ipairs(players) do\n      points_table[18][p.player_nr + 1] = p.total\n	  if p.total > highest.total then highest = p end\n    end\n    chat(highest.name .. \" won the game!\")\n    update_points_table(points_table)\n    return true\n  end\n  \n  return false\n    \nend\n\n-- A shallow copy function for tables\nfunction shallowcopy(orig)\n    local orig_type = type(orig)\n    local copy\n    if orig_type == \'table\' then\n        copy = {}\n        for orig_key, orig_value in pairs(orig) do\n            copy[orig_key] = orig_value\n        end\n    else -- number, string, boolean, etc\n        copy = orig\n    end\n    return copy\nend',22,1,6,1,1,0,5,1,'function onpickup_all(player, deck)\nend','function onplay_all(player, card)\nend','function onendturn(player)\nend','function onbeginturn(player)\n  \n  local slot_list = {}\n  table.insert(slot_list, {\n    slot_type = \"table_slot\",\n    slot_nrs = {1, 2, 3, 4, 5}\n  })\n  \n  enable_marking(slot_list)\n  \n  -- Roll all dice\n  for i = 1, 5 do\n    roll_dice(table_slots[i])\n  end\n\n  update_table()\n  \n  -- Count how many rolls the player has done\n  player.rolls = 1\nend',5,1,1);
/*!40000 ALTER TABLE `ds_game` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2013-11-04 20:03:50
